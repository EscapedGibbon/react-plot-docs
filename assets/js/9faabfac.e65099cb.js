"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[819],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,l=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(f,i(i({ref:e},p),{},{components:t})):r.createElement(f,i({ref:e},p))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8157:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={},l="NMR spectra",s={unversionedId:"experimental/nmr",id:"experimental/nmr",title:"NMR spectra",description:"Example of code loading and converting a jcamp (using jcampconverter)",source:"@site/docs/500_experimental/nmr.md",sourceDirName:"500_experimental",slug:"/experimental/nmr",permalink:"/experimental/nmr",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/500_experimental/nmr.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Infrared spectrum",permalink:"/experimental/ir"},next:{title:"fetch",permalink:"/documentation/fetch"}},p=[{value:"<sup>1</sup>H NMR",id:"1h-nmr",children:[],level:2},{value:"<sup>13</sup>C NMR",id:"13c-nmr",children:[],level:2}],u={toc:p};function d(n){var e=n.components,t=(0,o.Z)(n,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nmr-spectra"},"NMR spectra"),(0,a.kt)("p",null,"Example of code loading and converting a jcamp (using ",(0,a.kt)("inlineCode",{parentName:"p"},"jcampconverter"),")"),(0,a.kt)("h2",{id:"1h-nmr"},(0,a.kt)("sup",null,"1"),"H NMR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},'function ZoomablePlot() {\n  const [data, setData] = useState();\n  const zoom = useAxisZoom({ direction: "horizontal" });\n\n  useEffect(async () => {\n    const response = await fetch("/data/nmr-1h.jdx");\n    const jcamp = await response.text();\n    const data = xyToXYObject(convertJcamp(jcamp).flatten[0].spectra[0].data);\n    setData(data);\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <Plot width={800} height={300}>\n          <LineSeries data={data} xAxis="x" yAxis="y" />\n          <Axis\n            id="x"\n            position="bottom"\n            label="Chemical shift (\ud835\udec5)"\n            displayPrimaryGridLines\n            flip={true}\n          />\n          <Axis position="left" hidden={true} paddingStart={0.03} />\n          <Annotations>{zoom.annotations}</Annotations>\n        </Plot>\n      ) : undefined}\n    </div>\n  );\n}\n\nrender(\n  <PlotController>\n    <ZoomablePlot />\n  </PlotController>\n);\n')),(0,a.kt)("h2",{id:"13c-nmr"},(0,a.kt)("sup",null,"13"),"C NMR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},'function ZoomablePlot() {\n  const [data, setData] = useState();\n  const zoom = useAxisZoom({ direction: "horizontal" });\n  useEffect(async () => {\n    const response = await fetch("/data/nmr-13c.jdx");\n    const jcamp = await response.text();\n    const data = xyToXYObject(convertJcamp(jcamp).flatten[0].spectra[0].data);\n    setData(data);\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <Plot width={800} height={300}>\n          <LineSeries data={data} xAxis="x" yAxis="y" />\n          <Axis\n            id="x"\n            position="bottom"\n            label="Chemical shift (\ud835\udec5)"\n            displayPrimaryGridLines\n            flip={true}\n          />\n          <Axis position="left" hidden={true} paddingStart={0.03} />\n          <Annotations>{zoom.annotations}</Annotations>\n        </Plot>\n      ) : undefined}\n    </div>\n  );\n}\n\nrender(\n  <PlotController>\n    <ZoomablePlot />\n  </PlotController>\n);\n')))}d.isMDXComponent=!0}}]);