"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[87],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=r.createContext({}),c=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=c(n.components);return r.createElement(s.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(f,a(a({ref:e},p),{},{components:t})):r.createElement(f,a({ref:e},p))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4466:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={slug:"/"},s="Introduction",c={unversionedId:"intro",id:"intro",title:"Introduction",description:"React-plot is a react component specially designed to display scientific information like spectra or measurements. It allows to display large amount of data as well as annotations like ellipse, text or the result of a peak picking.",source:"@site/docs/000_intro.md",sourceDirName:".",slug:"/",permalink:"/",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/000_intro.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{slug:"/"},sidebar:"tutorialSidebar",next:{title:"Heading",permalink:"/plot/heading"}},p=[],u={toc:p};function d(n){var e=n.components,t=(0,o.Z)(n,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"React-plot is a react component specially designed to display scientific information like spectra or measurements. It allows to display large amount of data as well as annotations like ellipse, text or the result of a peak picking."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={300} height={300}>\n  <LineSeries\n    data={[\n      { x: 1, y: 1 },\n      { x: 2, y: 2 },\n      { x: 3, y: 3 },\n      { x: 4, y: 2 },\n      { x: 5, y: 1 },\n    ]}\n    xAxis="x"\n    yAxis="y"\n  />\n  <Axis\n    id="x"\n    position="bottom"\n    label="Drain voltage [V]"\n    displayPrimaryGridLines\n  />\n  <Axis\n    id="y"\n    position="left"\n    label="Drain current [mA]"\n    displayPrimaryGridLines\n  />\n</Plot>\n')),(0,i.kt)("p",null,"Interactivity with the plot is achieved Using ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks"),". In the following example it is possible to draw a rectangle to zoom and click twice to reset the original zoom."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},'function ZoomablePlot() {\n  const [data, setData] = useState();\n  const zoom = useRectangularZoom();\n\n  useEffect(async () => {\n    const response = await fetch("/data/ir.jdx");\n    const jcamp = await response.text();\n    const data = xyToXYObject(\n      convertJcamp(jcamp).flatten[0].spectra[0].data\n    ).map((point) => ({ x: point.x, y: point.y * 100 }));\n    setData(data);\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <Plot width={800} height={300}>\n          <LineSeries data={data} xAxis="x" yAxis="y" />\n          <Axis\n            id="x"\n            position="bottom"\n            label="Wavenumber (cm-1)"\n            displayPrimaryGridLines\n            flip={true}\n          />\n          <Axis\n            id="y"\n            position="left"\n            label="Transmitance (%)"\n            displayPrimaryGridLines\n          />\n          <Annotations>{zoom.annotations}</Annotations>\n        </Plot>\n      ) : undefined}\n    </div>\n  );\n}\n\nrender(\n  <PlotController>\n    <ZoomablePlot />\n  </PlotController>\n);\n')))}d.isMDXComponent=!0}}]);