"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[378],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return p}});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),p=i,m=d["".concat(s,".").concat(p)]||d[p]||y[p]||a;return r?t.createElement(m,l(l({ref:n},u),{},{components:r})):t.createElement(m,l({ref:n},u))}));function p(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9948:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var t=r(7462),i=r(3366),a=(r(7294),r(3905)),l=["components"],o={},s="Series",c={unversionedId:"series/intro",id:"series/intro",title:"Series",description:"There are currently 5 different kind of series that can be added in a plot:",source:"@site/docs/100_series/intro.md",sourceDirName:"100_series",slug:"/series/intro",permalink:"/series/intro",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/100_series/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Heading",permalink:"/plot/heading"},next:{title:"Axis",permalink:"/axis/intro"}},u=[{value:"LineSeries",id:"lineseries",children:[],level:2},{value:"LineSeries with error bars",id:"lineseries-with-error-bars",children:[],level:2},{value:"ScatterSeries",id:"scatterseries",children:[],level:2},{value:"FunctionSeries",id:"functionseries",children:[],level:2},{value:"BarSeries",id:"barseries",children:[],level:2},{value:"RangeSeries",id:"rangeseries",children:[],level:2}],y={toc:u};function d(e){var n=e.components,r=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},y,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"series"},"Series"),(0,a.kt)("p",null,"There are currently 5 different kind of series that can be added in a plot:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"LineSeries"),(0,a.kt)("li",{parentName:"ul"},"ScatterSeries"),(0,a.kt)("li",{parentName:"ul"},"FunctionSeries"),(0,a.kt)("li",{parentName:"ul"},"BarSeries"),(0,a.kt)("li",{parentName:"ul"},"RangeSeries")),(0,a.kt)("p",null,"Series are direct children of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Plot")," component and you may have as many Series as you which on the same plot."),(0,a.kt)("h2",{id:"lineseries"},"LineSeries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={300} height={300}>\n  <LineSeries\n    data={[\n      { x: 1, y: 1 },\n      { x: 2, y: 2 },\n      { x: 3, y: 3 },\n      { x: 4, y: 2 },\n      { x: 5, y: 1 },\n    ]}\n    lineStyle={{ stroke: "blue" }}\n    displayMarker={true}\n    markerShape="circle"\n    markerSize="8"\n    markerStyle={{ fill: "yellow" }}\n  />\n  <LineSeries\n    data={[\n      { x: 1, y: 2 },\n      { x: 2, y: 1 },\n      { x: 3, y: 2 },\n      { x: 4, y: 1 },\n      { x: 5, y: 2 },\n    ]}\n    lineStyle={{ stroke: "green" }}\n  />\n</Plot>\n')),(0,a.kt)("h2",{id:"lineseries-with-error-bars"},"LineSeries with error bars"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={300} height={300}>\n  <LineSeries\n    data={[\n      { x: 1, y: 1, xError: 0.2 },\n      { x: 2, y: 2, yError: 0.05 },\n      { x: 3, y: 3, xError: [0.1, 0.2], yError: [0.2, 0.3] },\n      { x: 4, y: 2 },\n      { x: 5, y: 1 },\n    ]}\n    lineStyle={{ stroke: "blue" }}\n    displayErrorBars={true}\n    errorBarsCapSize={"5"}\n    errorBarsStyle={{ strokeWidth: 1 }}\n    errorBarsCapStyle={{ stroke: "blue" }}\n  />\n  <Axis min={0} max={6} id="x" position="bottom" />\n  <Axis min={0} max={4} id="y" position="left" />\n</Plot>\n')),(0,a.kt)("h2",{id:"scatterseries"},"ScatterSeries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={300} height={300}>\n  <ScatterSeries\n    data={[\n      { x: 1, y: 1 },\n      { x: 2, y: 2 },\n      { x: 3, y: 3 },\n      { x: 4, y: 2 },\n      { x: 5, y: 1 },\n    ]}\n    lineStyle={{ stroke: "blue" }}\n  />\n  <ScatterSeries\n    data={[\n      { x: 1, y: 2 },\n      { x: 2, y: 1 },\n      { x: 3, y: 2 },\n      { x: 4, y: 1 },\n      { x: 5, y: 2 },\n    ]}\n    lineStyle={{ stroke: "green" }}\n  />\n</Plot>\n')),(0,a.kt)("h2",{id:"functionseries"},"FunctionSeries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={800} height={300}>\n  <FunctionSeries\n    getY={(x) => Math.sin(x)}\n    label="y=4*sin(x)"\n    lineStyle={{ stroke: "blue" }}\n  />\n  <FunctionSeries\n    getY={(x) => Math.cos(x)}\n    label="y=4*cos(x)"\n    lineStyle={{ stroke: "red" }}\n  />\n  <Legend position="embedded" />\n  <Axis min={0} max={20} id="x" position="bottom" />\n  <Axis min={-2} max={2} id="y" position="left" />\n</Plot>\n')),(0,a.kt)("h2",{id:"barseries"},"BarSeries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={300} height={300}>\n  <BarSeries\n    data={[\n      { x: 1, y: 1 },\n      { x: 2, y: 2 },\n      { x: 3, y: 3 },\n      { x: 4, y: 2 },\n      { x: 5, y: 1 },\n    ]}\n    lineStyle={{ stroke: "rgba(255,0,0,0.5)", strokeWidth: "10" }}\n  />\n  <BarSeries\n    data={[\n      { x: 1, y: 2 },\n      { x: 2, y: 1 },\n      { x: 3, y: 2 },\n      { x: 4, y: 1 },\n      { x: 5, y: 2 },\n    ]}\n    lineStyle={{ stroke: "rgba(0,255,0,0.5)", strokeWidth: "30" }}\n  />\n  <Axis min={0} max={6} id="x" position="bottom" />\n  <Axis min={0} id="y" position="left" />\n</Plot>\n')),(0,a.kt)("h2",{id:"rangeseries"},"RangeSeries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Plot width={300} height={300}>\n  <RangeSeries\n    data={[\n      { x: 1, y1: 1, y2: 5 },\n      { x: 2, y1: 2, y2: 4 },\n      { x: 3, y1: 3, y2: 4 },\n      { x: 4, y1: 2, y2: 4 },\n      { x: 5, y1: 1, y2: 5 },\n    ]}\n    lineStyle={{ stroke: "red", strokeWidth: "3", fill: "green" }}\n  />\n</Plot>\n')))}d.isMDXComponent=!0}}]);