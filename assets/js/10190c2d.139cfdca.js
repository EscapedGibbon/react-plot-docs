"use strict";(self.webpackChunkdocs_react_plot=self.webpackChunkdocs_react_plot||[]).push([[681],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(t),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return t?o.createElement(k,a(a({ref:n},p),{},{components:t})):o.createElement(k,a({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var u=2;u<l;u++)a[u]=t[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4252:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var o=t(7462),r=t(3366),l=(t(7294),t(3905)),a=["components"],i={},s="Hooks",u={unversionedId:"hooks/intro",id:"hooks/intro",title:"Hooks",description:"react-plot provides hook that allows to add functionalities to the plot.",source:"@site/docs/400_hooks/intro.md",sourceDirName:"400_hooks",slug:"/hooks/intro",permalink:"/hooks/intro",editUrl:"https://github.com/zakodium/react-plot-docs/tree/main/docs/400_hooks/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Annotations",permalink:"/annotations/intro"},next:{title:"Infrared spectrum",permalink:"/experimental/ir"}},p=[{value:"useStartMoveEnd",id:"usestartmoveend",children:[],level:2},{value:"useDrawRectangle",id:"usedrawrectangle",children:[],level:2},{value:"useRectangularZoom",id:"userectangularzoom",children:[],level:2},{value:"useAxisZoom",id:"useaxiszoom",children:[],level:2}],c={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"hooks"},"Hooks"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"react-plot")," provides hook that allows to add functionalities to the plot."),(0,l.kt)("p",null,"To benefit of those features the hooks have to be wrapped in a ",(0,l.kt)("inlineCode",{parentName:"p"},"PlotController"),". Some hooks like ",(0,l.kt)("inlineCode",{parentName:"p"},"useRectangularZoom")," will apply by default to all the ",(0,l.kt)("inlineCode",{parentName:"p"},"Plot")," components contained in the ",(0,l.kt)("inlineCode",{parentName:"p"},"PlotController"),". In the same page there may be many ",(0,l.kt)("inlineCode",{parentName:"p"},"Plot")," components group in different ",(0,l.kt)("inlineCode",{parentName:"p"},"PlotController")," components."),(0,l.kt)("h2",{id:"usestartmoveend"},"useStartMoveEnd"),(0,l.kt)("p",null,"The low level hook ",(0,l.kt)("inlineCode",{parentName:"p"},"useStartMoveEnd")," allows to track the mouse. This hook is used by other hooks but can also be used natively."),(0,l.kt)("p",null,"If accepts 3 callbacks:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"onStart: the mouse was clicked"),(0,l.kt)("li",{parentName:"ul"},"onMove: the mouse was dragged"),(0,l.kt)("li",{parentName:"ul"},"onEnd: the mouse was released")),(0,l.kt)("p",null,"In the following example we simply log the different events."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},'function TrackablePlot() {\n  const [currentEvent, setCurrentEvent] = useState();\n  const tracker = useStartMoveEnd({\n    onStart: (event) => {\n      setCurrentEvent({ kind: "onStart", event });\n    },\n    onMove: (event) => {\n      setCurrentEvent({ kind: "onMove", event });\n    },\n    onEnd: (event) => {\n      setCurrentEvent({ kind: "onEnd", event });\n    },\n  });\n  return (\n    <div style={{ display: "flex" }}>\n      <Plot width={300} height={300}>\n        <LineSeries\n          data={[\n            { x: 1, y: 1 },\n            { x: 2, y: 2 },\n            { x: 3, y: 3 },\n            { x: 4, y: 2 },\n            { x: 5, y: 1 },\n          ]}\n        />\n      </Plot>\n      <ObjectInspector data={currentEvent} />\n    </div>\n  );\n}\n\nrender(\n  <PlotController>\n    <TrackablePlot />\n  </PlotController>\n);\n')),(0,l.kt)("h2",{id:"usedrawrectangle"},"useDrawRectangle"),(0,l.kt)("p",null,"A more advanced hook will not only monitor the movement of the mouse but will also return ",(0,l.kt)("inlineCode",{parentName:"p"},"annotations")," that can directly be drawn in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Plot"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"const drawRectangle = useDrawRectangle();")),(0,l.kt)("li",{parentName:"ul"},"add the ",(0,l.kt)("inlineCode",{parentName:"li"},"drawRectangle.annotations")," in order to draw the zoom rectangle: ",(0,l.kt)("inlineCode",{parentName:"li"},"<Annotations>{drawRectangle.annotations}</Annotations>"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},"function DrawRectanglePlot() {\n  const drawRectangle = useDrawRectangle();\n  return (\n    <Plot width={300} height={300}>\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{drawRectangle.annotations}</Annotations>\n    </Plot>\n  );\n}\n\nrender(\n  <PlotController>\n    <DrawRectanglePlot />\n  </PlotController>\n);\n")),(0,l.kt)("h2",{id:"userectangularzoom"},"useRectangularZoom"),(0,l.kt)("p",null,"This hook allows directly to manage the zoom in a plot. There are 3 steps in order ot implement the zoom:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"const zoom = useRectangularZoom();")),(0,l.kt)("li",{parentName:"ul"},"add the ",(0,l.kt)("inlineCode",{parentName:"li"},"zoom.annotations")," in order to draw the zoom rectangle: ",(0,l.kt)("inlineCode",{parentName:"li"},"<Annotations>{zoom.annotations}</Annotations>"))),(0,l.kt)("p",null,"This hook also implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"double click")," detection to reset the zoom to its original value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},"function ZoomablePlot() {\n  const zoom = useRectangularZoom();\n  return (\n    <Plot width={300} height={300}>\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\nrender(\n  <PlotController>\n    <ZoomablePlot />\n  </PlotController>\n);\n")),(0,l.kt)("p",null,"If a ",(0,l.kt)("inlineCode",{parentName:"p"},"PlotController")," contains many ",(0,l.kt)("inlineCode",{parentName:"p"},"Plot")," the change will be applied on all of them."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},"function ZoomablePlot() {\n  const zoom = useRectangularZoom();\n  return (\n    <Plot width={300} height={300}>\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\nrender(\n  <PlotController>\n    <ZoomablePlot />\n    <ZoomablePlot />\n  </PlotController>\n);\n")),(0,l.kt)("h2",{id:"useaxiszoom"},"useAxisZoom"),(0,l.kt)("p",null,"This hook allows to zoom in a plot along the specified axis (default to horitzontal). There are 3 steps in order ot implement the zoom:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"wrap your plot component in ",(0,l.kt)("inlineCode",{parentName:"li"},"<PlotController>")),(0,l.kt)("li",{parentName:"ul"},"add the hook: ",(0,l.kt)("inlineCode",{parentName:"li"},"const zoom = useAxisZoom({direction:'horizontal'});")),(0,l.kt)("li",{parentName:"ul"},"add the ",(0,l.kt)("inlineCode",{parentName:"li"},"zoom.annotations")," in order to draw the zoom rectangle: ",(0,l.kt)("inlineCode",{parentName:"li"},"<Annotations>{zoom.annotations}</Annotations>"))),(0,l.kt)("p",null,"This hook also implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"double click")," detection to reset the zoom to its original value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live noInline={true}",live:!0,noInline:"{true}"},"function ZoomablePlot() {\n  const zoom = useAxisZoom();\n  return (\n    <Plot width={300} height={300}>\n      <LineSeries\n        data={[\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 2 },\n          { x: 5, y: 1 },\n        ]}\n      />\n      <Annotations>{zoom.annotations}</Annotations>\n    </Plot>\n  );\n}\nrender(\n  <PlotController>\n    <ZoomablePlot />\n  </PlotController>\n);\n")))}m.isMDXComponent=!0}}]);